#!/usr/bin/env bash
# Created by Marcelo Carlos (contact@marcelocarlos.com)
# Source: https://github.com/marcelocarlosbr/dotfiles

BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
TURQUOISE="\[\033[00;36m\]"
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)

BOLD=$(tput bold)
RESET=$(tput sgr0)

tput sgr0

export BLACK
export RED
export GREEN
export YELLOW
export BLUE
export MAGENTA
export CYAN
export WHITE
export BOLD
export TURQUOISE
export RESET

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

# modified version of the one in http://joefleming.net/posts/git-info-in-your-bash-prompt/
function parse_git_info {
    git rev-parse --git-dir > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        git_status="$(git status 2> /dev/null)"

        branch_pattern="On branch ([^${IFS}]*)"
        detached_branch_pattern="Not currently on any branch"
        remote_pattern="Your branch is (.*) of ([^${IFS}]*) by ([^${IFS}]*)"
        diverge_pattern="Your branch and (.*) have diverged"
        diverge_pattern_count="and have ([^${IFS}]*) and ([^${IFS}]*) different commits"
        untracked_pattern="Untracked files:"
        new_pattern="new file:"
        not_staged_pattern="Changes not staged for commit"
        staged_pattern="Changes to be committed"

        #files not staged for commit
        if [[ ${git_status}} =~ ${not_staged_pattern} ]] || [[ ${git_status} =~ ${untracked_pattern} ]] || [[ ${git_status} =~ ${staged_pattern} ]] || [[ ${git_status} =~ ${new_pattern} ]]; then
            state=" *"
            #remote="‚úñ"
            #remote=" +"
        fi
        # add an else if or two here if you want to get more specific
        # show if we're ahead or behind HEAD
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                remote=" ‚ñ≤(${BASH_REMATCH[3]})" # ‚ñ¥ ‚Üë
            else
                remote=" ‚ñº(${BASH_REMATCH[3]})" # ‚ñæ ‚Üì
            fi
        fi

        #diverged branch
        #if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        if [[ ${git_status} =~ ${diverge_pattern_count} ]]; then
                remote=" (${BASH_REMATCH[1]})‚µñ(${BASH_REMATCH[2]})" # ‚Üï ﬂå êåñ
        fi
        #branch name
        if [[ ${git_status} =~ ${branch_pattern} ]]; then
            branch=${BASH_REMATCH[1]}
        #detached branch
        elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
            branch="NO BRANCH"
        fi

	echo "[git: ${branch}${remote}${state}] "
    fi
    return
}

function parse_user {
    if [ "$(id -u)" == "0" ]; then
        echo "\[${BOLD}${RED}\]\u\[$RESET\]"
    else
        echo "\[${BOLD}${TURQUOISE}\]\u\[$RESET\]"
    fi
}

function k8s_context {
  local stage=$(echo -n "[k8s: $(kubectl config current-context)]")
  if [ "$stage" == "[k8s: production]" ]; then
    echo -ne "$BOLD$RED$stage$RESET"
  else
    echo -ne "$GREEN$stage$RESET"
  fi
}

function gcloud_config {
  local stage=$(echo -n "[gcp: $(cat ~/.config/gcloud/active_config)]")
  if [ "$stage" == "[gcp: production]" ]; then
    echo -ne "$BOLD$RED$stage$RESET"
  else
    echo -ne "$GREEN$stage$RESET"
  fi
}

function terraform_workspace {
#   if [ "$(terraform show)" != "No state." ]; then
    local stage=$(echo -ne "[tf: $(terraform workspace show)]")
    if [ "$stage" == "[tf: production]" ]; then
      echo -ne "$BOLD$RED$stage$RESET"
    elif [ "$stage" == "[tf: default]" ]; then
	echo -ne "$stage"
    else
      echo -ne "$GREEN$stage$RESET"
    fi
}

function get_ps1 {
   EXIT_STATUS="$?"
    if [ "${EXIT_STATUS}" -eq 0  ]; then
        EXIT_DISPLAY="${GREEN}$EXIT_STATUS${RESET}"
    else
        EXIT_DISPLAY="${RED}$EXIT_STATUS${RESET}"
    fi
    PS1="\[$BOLD\]\[$GREEN\]\w\[$BLACK\] - $(parse_user) - \D{%T} - ${EXIT_DISPLAY}] \[$YELLOW\]\$(parse_git_info)\$(gcloud_config) \$(k8s_context) \$(terraform_workspace)\[$BOLD\]\[$BLACK\]\n\$ \[$RESET\]"
}

PROMPT_COMMAND=get_ps1
